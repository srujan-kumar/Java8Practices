package Java8Programs;

import java.util.*;
import java.util.stream.Collectors;

public class CollectionHiddenMethods {
    public static void main(String[] args) {
        // 1) Collection.nCopies() --> the list generated by this method is immutable **
        //  This will create n copies of the objects.i.e.. JAVA AUTOMATION ADDED 5 times.

        List<String> namesList= Collections.nCopies(5, "JAVA AUTOMATION");
        try{
         namesList.forEach(System.out::println);
           namesList.set(1,"JAVA");
        }
        catch(UnsupportedOperationException e){
            System.out.println("List is Immutable It cant be Modified");
           // e.printStackTrace();
        }

        // 2 Collections.frequency()
        List<Integer> numbersList= Arrays.asList(1,2,3,1,4,5,6,7,8,2,3,4,7,2,1);
       // long count=Collections.frequency(numbersList,3);
       // numbersList.stream().filter(e->Collections.frequency(numbersList,e)>1).collect(Collectors.toList()).forEach(System.out::println);
       // System.out.println("Number 3 Present "+count+" times");

        //Very Imp Count each element count and store it in Map, new Map is generating on the go at runtime
       // Map<Integer,Integer> countMap=numbersList.stream().collect(Collectors.toMap(number->number, number->Collections.frequency(numbersList,number),(existingValue,newValue)->existingValue));

        //System.out.println("Count Each Number -->"+countMap);

        Map<Integer,Integer> countMap1=numbersList.stream().collect(Collectors.toMap(number->number, number->Collections.frequency(numbersList,number)));
        System.out.println("Count Each Number -->"+countMap1);
        Map<Integer,Long> countMap2=numbersList.stream().collect(Collectors.groupingBy(num->num,Collectors.counting()));
        System.out.println("Count Each Number -->"+countMap2);


        // 3) Collections.disjoint() --> if two collection has some common elements it will return true, else false
        List<Integer> list1=new ArrayList<>();
        Collections.addAll(list1, 1,2,3,4,5,6,7);

        List<Integer> list2=new ArrayList<>();
        Collections.addAll(list2, 1,5,9,11,12,6,7);

        boolean commonElemCheck=Collections.disjoint(list1,list2);
        System.out.println("Common Elements Available "+commonElemCheck);

        // Collections.singleton --> it Creates a Immutable Collection that contain Single element
        Set<String> element=Collections.singleton("Java techie");
        try{
            element.add("Youtube");
        }
        catch(UnsupportedOperationException e){
            System.out.println("List is Immutable It cant be Modified");
            // e.printStackTrace();
        }

        // 5) *** Collections.rotate() --> rotate the list left side, right side based on n no of positions
        List<Integer> numbers=new ArrayList<>();
        for(int i=0;i<10;i++){
            numbers.add(i);
        }
        Collections.rotate(numbers, 3); // O/p will be -->  8,9,10,1,2,3,4,5,6,7
        Collections.rotate(numbers,-4); // O/P will be --> 5,6,7,8,9,1,2,3,4

    }
}
