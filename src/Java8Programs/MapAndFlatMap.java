package Java8Programs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/* Map:
            Perform only the mapping.
            One-to-one mapping occurs in map.
            map operation produces one output value for each input value
Map can be used where we have to map the elements of a particular collection to a certain function,
and then we need to return the stream which contains the updated results.

 */
/* FlatMap :
            Perform mapping as well as flattening.
            One-to-many mapping occurs in flatMap().
            whereas the flatMap operation produces an arbitrary number (zero or more) values for each input value.
    flatMap() can be used where we have to flatten or transform out the string, as we cannot flatten our string using map().
    Ex: 1) Getting the 1st Character of all the String present in a List of Strings and returning
           the result in form of a stream.

 */
public class MapAndFlatMap {
    public static void main(String[] args) {
            // Simple Map Example
        Stream.of("dog", "cat")              // stream of 2 Strings
                .map(s -> s.length()).collect(Collectors.toList()).forEach(System.out::println);

        // Simple FlatMap Example
        Stream.of("dog", "cat")
                .flatMapToInt(s -> s.chars()).forEach(System.out::println); //O/P --> Despite the name, String.chars() method returns ints (actual value of each char). So the actual collection will be: [100, 111, 103, 99, 97, 116]

        // MAP EXAMPLE
        // making the array list object
        List<String> fruit = new ArrayList<>();
        fruit.add("Apple");
        fruit.add("mango");
        fruit.add("pineapple");
        fruit.add("kiwi");
        System.out.println("List of fruit-" + fruit);

        // lets use map() to convert list of fruit
        List list = fruit.stream()
                .map(s -> s.length())
                .collect(Collectors.toList());
        System.out.println("List generated by map-" + list);

        // O/P -->   List of fruit-[Apple, mango, pineapple, kiwi]
         //          List generated by map-[5, 5, 9, 4]

        // Another Map Example
        Stream.of("a", "b", "hello") // Stream of String
                .map(String::toUpperCase) // Returns a stream consisting of the results of applying the given function to the elements of this stream.
                .collect(Collectors.toList()).forEach(System.out::println);

        //**** FLAT MAP Example
        // making the arraylist object of List of Integer
        List<List<Integer> > number = new ArrayList<>();

        // adding the elements to number arraylist
        number.add(Arrays.asList(1, 2));
        number.add(Arrays.asList(3, 4));
        number.add(Arrays.asList(5, 6));
        number.add(Arrays.asList(7, 8));

        System.out.println("List of list-" + number);

        // using flatmap() to flatten this list
        List<Integer> flatList
                = number.stream()
                .flatMap(list1 -> list1.stream())
                .collect(Collectors.toList());

        // printing the list
        System.out.println("List generate by flatMap-"
                + flatList);

        //O/P --> List of list-[[1, 2], [3, 4], [5, 6], [7, 8]]
        //        List generate by flatMap-[1, 2, 3, 4, 5, 6, 7, 8]
    }
}
